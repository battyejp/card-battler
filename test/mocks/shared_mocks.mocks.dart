// Mocks generated by Mockito 5.4.6 from annotations
// in card_battler/test/mocks/shared_mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i13;

import 'package:card_battler/game/coordinators/components/cards/card_coordinator.dart'
    as _i7;
import 'package:card_battler/game/coordinators/components/player/player_coordinator.dart'
    as _i11;
import 'package:card_battler/game/coordinators/components/player/player_info_coordinator.dart'
    as _i12;
import 'package:card_battler/game/models/card/card_model.dart' as _i2;
import 'package:card_battler/game/models/common/actor_model.dart' as _i3;
import 'package:card_battler/game/models/shared/effect_model.dart' as _i5;
import 'package:card_battler/game/services/card/cards_selection_manager_service.dart'
    as _i6;
import 'package:card_battler/game/services/game/game_phase_manager.dart' as _i9;
import 'package:card_battler/game/services/player/active_player_manager.dart'
    as _i10;
import 'package:card_battler/game/services/ui/card_selection_service.dart'
    as _i8;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeCardModel_0 extends _i1.SmartFake implements _i2.CardModel {
  _FakeCardModel_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeActorModel_1 extends _i1.SmartFake implements _i3.ActorModel {
  _FakeActorModel_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [CardModel].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardModel extends _i1.Mock implements _i2.CardModel {
  MockCardModel() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  String get type =>
      (super.noSuchMethod(
            Invocation.getter(#type),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#type)),
          )
          as String);

  @override
  List<_i5.EffectModel> get effects =>
      (super.noSuchMethod(
            Invocation.getter(#effects),
            returnValue: <_i5.EffectModel>[],
          )
          as List<_i5.EffectModel>);

  @override
  bool get isFaceUp =>
      (super.noSuchMethod(Invocation.getter(#isFaceUp), returnValue: false)
          as bool);

  @override
  set isFaceUp(bool? _isFaceUp) => super.noSuchMethod(
    Invocation.setter(#isFaceUp, _isFaceUp),
    returnValueForMissingStub: null,
  );

  @override
  _i2.CardModel copy() =>
      (super.noSuchMethod(
            Invocation.method(#copy, []),
            returnValue: _FakeCardModel_0(this, Invocation.method(#copy, [])),
          )
          as _i2.CardModel);

  @override
  Map<String, dynamic> toJson() =>
      (super.noSuchMethod(
            Invocation.method(#toJson, []),
            returnValue: <String, dynamic>{},
          )
          as Map<String, dynamic>);
}

/// A class which mocks [CardsSelectionManagerService].
///
/// See the documentation for Mockito's code generation for more information.
class MockCardsSelectionManagerService extends _i1.Mock
    implements _i6.CardsSelectionManagerService {
  MockCardsSelectionManagerService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  bool get hasSelection =>
      (super.noSuchMethod(Invocation.getter(#hasSelection), returnValue: false)
          as bool);

  @override
  bool isCardSelected(_i7.CardCoordinator? card) =>
      (super.noSuchMethod(
            Invocation.method(#isCardSelected, [card]),
            returnValue: false,
          )
          as bool);

  @override
  void selectCard(
    _i7.CardCoordinator? card,
    _i8.CardSelectionService? service,
  ) => super.noSuchMethod(
    Invocation.method(#selectCard, [card, service]),
    returnValueForMissingStub: null,
  );

  @override
  void deselectCard() => super.noSuchMethod(
    Invocation.method(#deselectCard, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [GamePhaseManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockGamePhaseManager extends _i1.Mock implements _i9.GamePhaseManager {
  MockGamePhaseManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i9.GamePhase get currentPhase =>
      (super.noSuchMethod(
            Invocation.getter(#currentPhase),
            returnValue: _i9.GamePhase.waitingToDrawPlayerCards,
          )
          as _i9.GamePhase);

  @override
  void addPhaseChangeListener(
    dynamic Function(_i9.GamePhase, _i9.GamePhase)? listener,
  ) => super.noSuchMethod(
    Invocation.method(#addPhaseChangeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removePhaseChangeListener(
    dynamic Function(_i9.GamePhase, _i9.GamePhase)? listener,
  ) => super.noSuchMethod(
    Invocation.method(#removePhaseChangeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  _i9.GamePhase nextPhase() =>
      (super.noSuchMethod(
            Invocation.method(#nextPhase, []),
            returnValue: _i9.GamePhase.waitingToDrawPlayerCards,
          )
          as _i9.GamePhase);
}

/// A class which mocks [ActivePlayerManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockActivePlayerManager extends _i1.Mock
    implements _i10.ActivePlayerManager {
  MockActivePlayerManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  set players(List<_i11.PlayerCoordinator>? value) => super.noSuchMethod(
    Invocation.setter(#players, value),
    returnValueForMissingStub: null,
  );

  @override
  void setNextPlayerToActive() => super.noSuchMethod(
    Invocation.method(#setNextPlayerToActive, []),
    returnValueForMissingStub: null,
  );

  @override
  void addActivePlayerChangeListener(
    dynamic Function(_i11.PlayerCoordinator)? listener,
  ) => super.noSuchMethod(
    Invocation.method(#addActivePlayerChangeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void removeActivePlayerChangeListener(
    dynamic Function(_i11.PlayerCoordinator)? listener,
  ) => super.noSuchMethod(
    Invocation.method(#removeActivePlayerChangeListener, [listener]),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}

/// A class which mocks [PlayerInfoCoordinator].
///
/// See the documentation for Mockito's code generation for more information.
class MockPlayerInfoCoordinator extends _i1.Mock
    implements _i12.PlayerInfoCoordinator {
  MockPlayerInfoCoordinator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get attack =>
      (super.noSuchMethod(Invocation.getter(#attack), returnValue: 0) as int);

  @override
  int get credits =>
      (super.noSuchMethod(Invocation.getter(#credits), returnValue: 0) as int);

  @override
  bool get isActive =>
      (super.noSuchMethod(Invocation.getter(#isActive), returnValue: false)
          as bool);

  @override
  set isActive(bool? value) => super.noSuchMethod(
    Invocation.setter(#isActive, value),
    returnValueForMissingStub: null,
  );

  @override
  _i3.ActorModel get model =>
      (super.noSuchMethod(
            Invocation.getter(#model),
            returnValue: _FakeActorModel_1(this, Invocation.getter(#model)),
          )
          as _i3.ActorModel);

  @override
  String get name =>
      (super.noSuchMethod(
            Invocation.getter(#name),
            returnValue: _i4.dummyValue<String>(this, Invocation.getter(#name)),
          )
          as String);

  @override
  int get health =>
      (super.noSuchMethod(Invocation.getter(#health), returnValue: 0) as int);

  @override
  String get healthDisplay =>
      (super.noSuchMethod(
            Invocation.getter(#healthDisplay),
            returnValue: _i4.dummyValue<String>(
              this,
              Invocation.getter(#healthDisplay),
            ),
          )
          as String);

  @override
  _i13.Stream<_i12.PlayerInfoCoordinator> get changes =>
      (super.noSuchMethod(
            Invocation.getter(#changes),
            returnValue: _i13.Stream<_i12.PlayerInfoCoordinator>.empty(),
          )
          as _i13.Stream<_i12.PlayerInfoCoordinator>);

  @override
  void adjustCredits(int? amount) => super.noSuchMethod(
    Invocation.method(#adjustCredits, [amount]),
    returnValueForMissingStub: null,
  );

  @override
  void resetCreditsAndAttack() => super.noSuchMethod(
    Invocation.method(#resetCreditsAndAttack, []),
    returnValueForMissingStub: null,
  );

  @override
  void adjustHealth(int? amount) => super.noSuchMethod(
    Invocation.method(#adjustHealth, [amount]),
    returnValueForMissingStub: null,
  );

  @override
  void notifyChange() => super.noSuchMethod(
    Invocation.method(#notifyChange, []),
    returnValueForMissingStub: null,
  );

  @override
  void dispose() => super.noSuchMethod(
    Invocation.method(#dispose, []),
    returnValueForMissingStub: null,
  );
}
